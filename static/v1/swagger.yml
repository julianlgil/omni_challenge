openapi: 3.0.0
info:
    title: Omni Ecomerce
    version: 0.0.1
    description: This is the endpoints documentation for omni_challenge ecommerceÂ® backend test
servers:
    -
        url: /api/v1/
paths:
    /healthcheck/:
        get:
            tags:
                - API Status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HealthCheckSchema'
                    description: Server online
            summary: Check server status
            description: Check server status
    /auth/:
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AccessTokenSchema'
                required: true
            tags:
                - Auth
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TokenResponseSchema'
                    description: Valid username and password
            summary: Get user access token
        delete:
            tags:
                - Auth
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TokenResponseSchema'
                    description: Valid username and password
            summary: Remove user access token
    /orders/:
        get:
            tags:
                - Orders
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get orders list of auth user
        post:
            requestBody:
                description: ''
                required: false
            tags:
                - Orders
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Create user order
    '/orders/{order_id}/':
        get:
            tags:
                - Orders
            parameters:
                -
                    style: simple
                    name: order_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get order detail
        put:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateOrderSchema'
                required: true
            tags:
                - Orders
            parameters:
                -
                    style: simple
                    name: order_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Update order
        delete:
            tags:
                - Orders
            parameters:
                -
                    style: simple
                    name: order_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeletedSchema'
                    description: Deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundSchema'
                    description: Not Found
            summary: Delete order
    /products/:
        get:
            tags:
                - Products
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get product list
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProductSchema'
                required: true
            tags:
                - Products
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Create product
    '/products/{product_id}/':
        get:
            tags:
                - Products
            parameters:
                -
                    style: simple
                    name: product_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductDetailResponseSchema'
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get product detail
        put:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProductSchema'
                required: true
            tags:
                - Products
            parameters:
                -
                    style: simple
                    name: product_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Create product
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProductUnitsSchema'
                required: true
            tags:
                - Products
            parameters:
                -
                    style: simple
                    name: product_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Update available units
        delete:
            tags:
                - Products
            parameters:
                -
                    style: simple
                    name: product_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeletedSchema'
                    description: Deleted
                '401':
                    description: Unauthorized
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundSchema'
                    description: Not Found
            summary: Delete product
    /payments/:
        get:
            tags:
                - Payments
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get payments list of auth user
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePaymentSchema'
                required: false
            tags:
                - Payments
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Create user payment
    '/payments/{payment_id}/':
        get:
            tags:
                - Payments
            parameters:
                -
                    style: simple
                    name: payment_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get payment detail
        put:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdatePaymentSchema'
                required: true
            tags:
                - Payments
            parameters:
                -
                    style: simple
                    name: payment_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Update payment
        delete:
            tags:
                - Payments
            parameters:
                -
                    style: simple
                    name: payment_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeletedSchema'
                    description: Deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundSchema'
                    description: Not Found
            summary: Delete payment
    /shipments/:
        get:
            tags:
                - Shipments
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get shipments list of auth user
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateShipmentSchema'
                required: false
            tags:
                - Shipments
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Create user shipment
    '/shipments/{shipment_id}/':
        get:
            tags:
                - Shipments
            parameters:
                -
                    name: shipment_id
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: OK
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
            summary: Get shipment detail
        put:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateShipmentSchema'
                required: true
            tags:
                - Shipments
            parameters:
                -
                    style: simple
                    name: shipment_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json: {}
                    description: Valid username and password
                '400':
                    content:
                        application/json: {}
                    description: 'Bad Request, username not exists or invalid password'
            summary: Update shipment
        delete:
            tags:
                - Shipments
            parameters:
                -
                    style: simple
                    name: shipment_id
                    description: ''
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeletedSchema'
                    description: Deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedResponseSchema'
                    description: Unauthorized
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundSchema'
                    description: Not Found
            summary: Delete shipment
components:
    schemas:
        NotFoundSchema:
            title: Not Found
            type: object
            properties:
                detail:
                    type: string
            example:
                detail:
                    - Not found.
        UnauthorizedResponseSchema:
            title: Unauthorized Response
            type: object
            properties:
                detail:
                    type: string
            example:
                detail: Authentication credentials were not provided.
        HealthCheckSchema:
            title: Health Check
            required:
                - message
            type: object
            properties:
                message:
                    type: string
            example:
                message: It's Working
        AccessTokenSchema:
            title: Access Token
            required:
                - username
                - password
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
            example:
                username: admin
                password: admin
        TokenResponseSchema:
            title: Token Response
            type: object
            properties:
                token:
                    type: string
            example:
                token: 3888fb7abeeae8671120ce854214be2081011fc0
        DeletedSchema:
            title: Deleted
            type: object
            properties:
                status:
                    type: string
            example:
                status: deleted
        CreateProductSchema:
            title: Root Type for CreateProductSchema
            description: ''
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                unit_price:
                    format: int32
                    type: integer
            example:
                name: jean
                description: blue jean
                unit_price: 20000
        UpdateProductSchema:
            title: Root Type for UpdateProductSchema
            description: ''
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                unit_price:
                    format: int32
                    type: integer
            example:
                name: camisa
                description: camisa azul
                unit_price: 10000
        UpdateProductUnitsSchema:
            title: Root Type for UpdateProductUnitsSchema
            description: ''
            type: object
            properties:
                units:
                    format: int32
                    type: integer
            example:
                units: 50
        ProductToOrderSchema:
            title: Root Type for ProductToOrderSchema
            description: ''
            type: object
            properties:
                product_id:
                    type: string
                units:
                    format: int32
                    type: integer
            example:
                product_id: Ã±lalkds-Ã±sklldkl-ksÃ±f
                units: 100
        UpdateOrderSchema:
            title: Root Type for UpdateOrderSchema
            description: ''
            type: object
            properties:
                products:
                    type: array
                    items:
                        $ref: '#/components/schemas/ProductToOrderSchema'
            example:
                products:
                    -
                        product_id: uuid
                        units: 112
        ProductDetailResponseSchema:
            title: Root Type for ProductDetailResponseSchema
            description: ''
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                description:
                    type: string
                unit_price:
                    format: int32
                    type: integer
                units:
                    type: string
                created_at:
                    type: string
                updated_at:
                    type: string
            example:
                id: 3de8bf36-146b-4e74-a9a2-d7c8adafac9c
                name: tenis
                description: tenis f10
                unit_price: 10000
                units: '0'
                created_at: '2021-06-10T19:47:55.374703Z'
                updated_at: '2021-06-10T19:47:55.374750Z'
        CreatePaymentSchema:
            title: Root Type for CreatePaymentSchema
            description: ''
            type: object
            properties:
                order_id:
                    type: string
                amount:
                    format: int32
                    type: integer
            example:
                order_id: uuid
                amount: 10000
        CreateShipmentSchema:
            title: Root Type for CreateShipmentSchema
            description: ''
            type: object
            properties:
                order_id:
                    type: string
                address:
                    type: string
                cellphone_number:
                    type: string
                products_to_ship:
                    type: array
                    items:
                        type: string
            example:
                order_id: order.id
                address: calle falsa 123
                cellphone_number: '3111111111'
                products_to_ship:
                    - product_id
        UpdateShipmentSchema:
            title: Root Type for UpdateShipmentSchema
            description: ''
            required:
                - status
            type: object
            properties:
                status:
                    enum:
                        - DELIVERED
                        - SHIPPED
                        - PENDING_SHIPPING
                    type: string
            example:
                status: SHIPPED
        UpdatePaymentSchema:
            title: Root Type for UpdatePaymentSchema
            description: ''
            required:
                - status
            type: object
            properties:
                status:
                    enum:
                        - PENDING
                        - SUCCESSFUL
                        - FAILED
                    type: string
            example:
                status: SUCCESSSFUL
    securitySchemes:
        httpBearer:
            scheme: bearer
            type: http
security:
    -
        httpBearer: []
tags:
    -
        name: API Status
    -
        name: Auth
    -
        name: Products
    -
        name: Orders
    -
        name: Payments
